// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user-srv.proto

package usersrv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserSrv service

func NewUserSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserSrv service

type UserSrvService interface {
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*UserSrvResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*UserSrvResponse, error)
	Validation(ctx context.Context, in *ValidationRequest, opts ...client.CallOption) (*UserSrvResponse, error)
}

type userSrvService struct {
	c    client.Client
	name string
}

func NewUserSrvService(name string, c client.Client) UserSrvService {
	return &userSrvService{
		c:    c,
		name: name,
	}
}

func (c *userSrvService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*UserSrvResponse, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Login", in)
	out := new(UserSrvResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*UserSrvResponse, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Register", in)
	out := new(UserSrvResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) Validation(ctx context.Context, in *ValidationRequest, opts ...client.CallOption) (*UserSrvResponse, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Validation", in)
	out := new(UserSrvResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserSrv service

type UserSrvHandler interface {
	Login(context.Context, *LoginRequest, *UserSrvResponse) error
	Register(context.Context, *RegisterRequest, *UserSrvResponse) error
	Validation(context.Context, *ValidationRequest, *UserSrvResponse) error
}

func RegisterUserSrvHandler(s server.Server, hdlr UserSrvHandler, opts ...server.HandlerOption) error {
	type userSrv interface {
		Login(ctx context.Context, in *LoginRequest, out *UserSrvResponse) error
		Register(ctx context.Context, in *RegisterRequest, out *UserSrvResponse) error
		Validation(ctx context.Context, in *ValidationRequest, out *UserSrvResponse) error
	}
	type UserSrv struct {
		userSrv
	}
	h := &userSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&UserSrv{h}, opts...))
}

type userSrvHandler struct {
	UserSrvHandler
}

func (h *userSrvHandler) Login(ctx context.Context, in *LoginRequest, out *UserSrvResponse) error {
	return h.UserSrvHandler.Login(ctx, in, out)
}

func (h *userSrvHandler) Register(ctx context.Context, in *RegisterRequest, out *UserSrvResponse) error {
	return h.UserSrvHandler.Register(ctx, in, out)
}

func (h *userSrvHandler) Validation(ctx context.Context, in *ValidationRequest, out *UserSrvResponse) error {
	return h.UserSrvHandler.Validation(ctx, in, out)
}
